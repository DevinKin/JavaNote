* 第4章-虚拟机性能监控与故障处理工具
  Sun JDK监控与故障处理工具
  | 名称   | 主要作用                                                                                                   |
  |--------+------------------------------------------------------------------------------------------------------------|
  | jps    | JVM Process Status Tool, 显示指定系统内所有HotSpot虚拟机进程                                               |
  | jstat  | JVM Statistics Monitoring Tool, 用于收集HotSpot虚拟机各方面的运行数据                                      |
  | jinfo  | Configuration Info For Java, 显示虚拟机配置信息                                                            |
  | jmap   | Memory Map for Java, 生成虚拟机内存转储快照(heapdump文件)                                                  |
  | jhat   | JVM Heap Dump Broswer, 用于分析heapdump文件，它会建立一个HTTP/HTML服务器，可以让用户在浏览器上查看分析结果 |
  | jstack | Stace Trace for Java, 显示虚拟机的线程快照                                                                          |

** JDK的命令行工具
*** jps：虚拟机进程状况工具
   jps可以列出正在运行的虚拟机进程，并显示虚拟机执行主类(Main Class,main()函数所在的类)名称以及这些进程的本地虚拟机唯一ID(Local Virtual Machine Identifier，LVMID)。

   命令格式
   #+begin_src sh
     jsp [options] [hostid]
   #+end_src


   jps工具主要选项
   | 选项 | 作用                                               |
   |------+----------------------------------------------------|
   | -q   | 只输出LVMID，省略主类的名称                        |
   | -m   | 输出虚拟机进程启动时传递给主类main()函数的参数     |
   | -l   | 输出主类的全名，如果进程执行的是Jar包，输出Jar路径 |
   | -v   | 输出虚拟机进程启动时JVM参数                                   |


*** jstat：虚拟机统计信息监控工具
    jstat(JVM Statistics Monitoring Tool)是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。

    jstat命令格式如下
    #+begin_src sh
      jstat [ option vmid [interval[s|ms] [count]] ]
    #+end_src

    远程虚拟机进程的 ~VMID~ 格式如下
    #+begin_src sh
      [protocol:][//lvmid[@hostname[:port]/servername]]
    #+end_src

    参数 ~interval~ 和 ~count~ 代表查询间隔和次数，如果省略这两个参数，说明只查询一次。每250毫秒查询一次进程2764垃圾收集情况，查询20次。
    #+begin_src sh
      jstat -gc 2764 250 20
    #+end_src

    jstat工具主要选项
    | 选项              | 作用                                                                                         |
    |-------------------+----------------------------------------------------------------------------------------------|
    | -class            | 监视类装在、卸载数量、总空间以及类装载所耗费的时间                                           |
    | -gc               | 监视Java堆状况，包括Eden区，两个survivor区、老年代、永久代等容量，已用空间、GC时间合计等信息 |
    | -gccapacity       | 监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大、最小空间                    |
    | -gcutil           | 监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比                              |
    | -gccause          | 与-gcutil功能一样，但会额外输出导致上次GC产生的原因                                          |
    | -gcnew            | 监视新生代GC状况                                                                             |
    | -gcnewcapacity    | 监视内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间                                 |
    | -gcold            | 监视老年代GC状况                                                                             |
    | -gcoldcapacity    | 监视内容与-gcold基本相同，输出主要关注使用到的最大、最小空间                                 |
    | -compiler         | 使出JIT编译器编译过的方法、耗时等信息                                                        |
    | -printcompilation | 输出已经被JIT编译过的方法                                                                               |

    jstat执行样例
    #+begin_src sh
      PS C:\Users\devinkin> jstat -gcutil 11180
      S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
      0.00  99.88  12.56  20.81  96.18  93.96     15    0.245     3    0.367    0.612
    #+end_src

    查询结果表明
    - 这台服务器新生代 ~Eden~ 区（E，表示Eden）使用了12.56%的空间，两个Survivor区(S0、S1,表示Survivor0、Survivor1)里面都是空的，老年代(O，表示Old)和元空间(M，表示MetaSpace)分别使用了20.81%和96.18%的空间。
    - 程序运行以来共发生Minor GC(YGC，表示Young GC)15次，总耗时(YGCT)0.245秒，发生Full GC(FGC，表示Full GC)3次，Full GC总耗时(FGCT，表示Full GC Time)为0.472秒。
    - 所有GC总耗时(GCT，表示GC Time)为0.577秒。
    
*** jinfo：Java配置信息工具
    jinfo(Configuration Info for Java)的作用是实时地查看和调整虚拟机各项参数。

    使用jps命令的 ~-v~ 参数可以查看虚拟机启动时显式指定的参数列表，未被显式指定的参数的系统默认值，只能使用 ~jinfo~ 的 ~-flag~ 选项进行查询了。

    ~jinfo~ 使用 ~-sysprops~ 选项把虚拟机进程的 ~System.getProperties()~ 的内容打印出来。

    ~jinfo~ 命令格式
    #+begin_src sh
      jinfo [option] pid
    #+end_src

    使用案例：查询CMSInitiatingOccupancyFraction参数值 
    #+begin_src sh
      jinfo -flag CMSInitiatingOccupancyFraction 11180
    #+end_src

*** jmap：Java内存映像工具
    ~jmap~ (Memory Map for Java)命令用于生成堆转储快照(一般称为heapdump或dump)文件。

    jmap的作用并不仅仅是为了获取 ~dump~ 文件，它还可以查询 ~finalize~ 执行队列、Java堆和元空间的详细信息，如空间使用率，当前使用的是哪种收集器等。

    jmap工具的主要选项
    | 选项           | 作用                                                                                                              |
    |----------------+-------------------------------------------------------------------------------------------------------------------|
    | -dump          | 生成Java堆转储快照。格式为：-dump:[live,]format=b, file=<filename>，其中live子参数说明是否只dump出存活的对象 |
    | -finalizerinfo | 显式在F-Queue中等待Finalizer线程执行finalize方法的对象                                                            |
    | -heap          | 显式Java堆详细信息，如使用哪种回收期，参数配置，分代状况等                                                        |
    | -histo         | 显式堆中对象统计信息，包括类、实例数量、合计容量                                                                  |
    | -F             | 当虚拟机进程堆-dump选项没有响应时，可使用这个选项强制生成dump快照                                                                          |

    jmap生成dump快照示例
    #+begin_src sh
      jmap -dump:format=b,file=idea.bin 11180
    #+end_src

*** jhat：虚拟机堆转储快照分析工具
    ~jhat~ 内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览器中查看。

    使用示例
    #+begin_src sh
      jhat idea.bin
    #+end_src

*** jstack：Java堆栈跟踪工具
    ~jstack~ (Stack Trace for Java)命令用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)。

    线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因。如线程死锁、死循环、外部请求资源导致的长时间等待等都是导致线程长时间停顿的常见原因。

    ~jstack~ 命令格式
    #+begin_src sh
      jstack [option] vmid
    #+end_src

    ~option~ 选项的合法值与具体含义
    | 选项 | 作用                                     |
    |------+------------------------------------------|
    | -F   | 当正常的请求不被响应时，强制输出线程堆栈 |
    | -l   | 除堆栈外，显式关于锁的附加信息           |
    | -m   | 如果调用到本地方法的花，可以显式C/C++的堆栈                |

    使用jstack查看线程堆栈
    #+begin_src sh
      jstack -l 11180
    #+end_src

*** HSDIS：JIT生成代码反汇编
    HSDIS是Sun官方推荐的HotSpot虚拟机JIT编译代码的汇编插件，它包含在HotSpot虚拟机的源码中，没有提供编译后的程序。

    HSDIS的作用是让HotSpot的 ~-XX:+PrintAssembly~ 指令调用它来把动态生成的本地代码还原为汇编代码输出，同时生成大量有价值的注释。

    测试代码
    #+begin_src java
      package chapter4.hsdis;

      /**
       ,* @program: UnderstandingJVM
       ,* @author: devinkin
       ,* @create: 2019-08-20 09:44
       ,* @description:
       ,**/
      public class Bar {
          int a = 1;
          static int b = 2;

          public int sum(int c) {
              return a + b + c;
          }

          public static void main(String[] args) {
              new Bar().sum(3);
          }
      }
    #+end_src

    使用示例
    #+begin_src sh
      >java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -Xcomp -XX:CompileCo
      mmand=dontinline,*Bar.sum -XX:CompileCommand=compileonly,*Bar.sum chapter4.hsdis.Bar
      OpenJDK 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
      CompileCommand: dontinline *Bar.sum
      CompileCommand: compileonly *Bar.sum
      Compiled method (c1)     153    1       3       chapter4.hsdis.Bar::sum (11 bytes)
       total in heap  [0x0000013eb68d0010,0x0000013eb68d03d0] = 960
       relocation     [0x0000013eb68d0188,0x0000013eb68d01b8] = 48
       main code      [0x0000013eb68d01c0,0x0000013eb68d02a0] = 224
       stub code      [0x0000013eb68d02a0,0x0000013eb68d0338] = 152
       oops           [0x0000013eb68d0338,0x0000013eb68d0340] = 8
       metadata       [0x0000013eb68d0340,0x0000013eb68d0348] = 8
       scopes data    [0x0000013eb68d0348,0x0000013eb68d0368] = 32
       scopes pcs     [0x0000013eb68d0368,0x0000013eb68d03c8] = 96
       dependencies   [0x0000013eb68d03c8,0x0000013eb68d03d0] = 8
      Could not load hsdis-amd64.dll; library not loadable; PrintAssembly is disabled

      ImmutableOopMap{rdx=Oop }pc offsets: 139 Compiled method (c1)     157    2       1       chapter4.hsdis.Bar::sum (11 bytes)
       total in heap  [0x0000013ebde00010,0x0000013ebde00378] = 872
       relocation     [0x0000013ebde00188,0x0000013ebde001b0] = 40
       main code      [0x0000013ebde001c0,0x0000013ebde00260] = 160
       stub code      [0x0000013ebde00260,0x0000013ebde002f8] = 152
       oops           [0x0000013ebde002f8,0x0000013ebde00300] = 8
       metadata       [0x0000013ebde00300,0x0000013ebde00308] = 8
       scopes data    [0x0000013ebde00308,0x0000013ebde00320] = 24
       scopes pcs     [0x0000013ebde00320,0x0000013ebde00370] = 80
       dependencies   [0x0000013ebde00370,0x0000013ebde00378] = 8

    #+end_src

    ~-Xcomp~ 让虚拟机编译模式执行代码，这样不需要执行足够次数来预热就能触发JIT编译。

    ~-XX:CompileCommand~ 让编译器不要内联 ~sum()~ 并且只编译 ~sum()~ 。

    ~-XX:+PrintAssembly~ 就是输出反汇编内容。

*** JConsole:Java监视与管理控制台
    JConsole(Java Monitoring and Management Console)是一种基于JMX的可视化监视、管理工具。它管理部分的功能是针对 JMX MBean进行管理。

    JConsole监视代码
    #+begin_src java
      package chapter4.jconsole;

      import java.util.ArrayList;
      import java.util.List;

      /**
       ,* @program: UnderstandingJVM
       ,* @author: devinkin
       ,* @create: 2019-08-20 10:06
       ,* @description: 监控测试类
       ,**/
      public class MonitoringTest {
          static class OOMObject {
              public byte[] placeholder = new byte[64 * 1024];
          }

          public static void fillHeap(int num) throws InterruptedException {
              List<OOMObject> list = new ArrayList<>();
              for (int i = 0; i < num; i++) {
                  // 稍作延时，令监控曲线的变化更加明显
                  Thread.sleep(50);
                  list.add(new OOMObject());
              }
              System.gc();
          }

          public static void main(String[] args) throws InterruptedException {
              fillHeap(1000);
          }

    #+end_src
    
    线程等待演示代码
    #+begin_src java
      package chapter4.jconsole;

      import java.io.BufferedReader;
      import java.io.IOException;
      import java.io.InputStreamReader;

      /**
       ,* @program: UnderstandingJVM
       ,* @author: devinkin
       ,* @create: 2019-08-20 10:25
       ,* @description: 线程等待演示代码
       ,**/
      public class ThreadWaitTest {
          public static void createBusyThread() {
              Thread thread = new Thread(() -> {
                  while (true) {
                  }
              }, "testBusyThread");
              thread.start();
          }

          public static void createLockThread(final Object lock) {
              Thread thread = new Thread(() -> {
                  synchronized (lock) {
                      try {
                          lock.wait();
                      } catch (InterruptedException e) {
                          e.printStackTrace();
                      }
                  }
              }, "testLockThread");
              thread.start();
          }

          public static void main(String[] args) throws IOException {
              BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
              br.readLine();
              createBusyThread();
              br.readLine();
              Object obj = new Object();
              createLockThread(obj);
          }
      }
    #+end_src

    死锁演示代码
    #+begin_src java
      package chapter4.jconsole;

      /**
       ,* @program: UnderstandingJVM
       ,* @author: devinkin
       ,* @create: 2019-08-20 10:39
       ,* @description: 死锁演示代码
       ,**/
      public class DeadLockTest {
          static class SynAddRunable implements Runnable {
              int a, b;
              public SynAddRunable(int a, int b) {
                  this.a = a;
                  this.b = b;
              }

              @Override
              public void run() {
                  synchronized (Integer.valueOf(a)) {
                      synchronized (Integer.valueOf(b)) {
                          System.out.println(a + b);
                      }
                  }
              }

              public static void main(String[] args) {
                  for (int i = 0; i < 100 ; i++) {
                      new Thread(new SynAddRunable(1, 2)).start();
                      new Thread(new SynAddRunable(2, 1)).start();
                  }
              }
          }
      }

    #+end_src

*** VisualVM:多合一故障处理工具
    VisualVM可以做到
    - 显示虚拟机进程以及进程的配置、环境信息(jsp、jinfo)
    - 监视应用程序CPU、GC、堆、方法区以及线程的信息(jstat、jstack)
    - dump以及分析堆转储快照(jmap、jhat)
    - 方法级的程序运行性能分析，找出被调用最多，运行时间最长的方法
    - 离线程序快照，收集程序的运行时配置、线程dump、内存dump等信息建立一个快照，可以将快照发送开发者进行Bug反馈
    - 其他plugins的无限的可能性
      
    BTrace跟踪演示
    #+begin_src java
      package chapter4.jconsole;

      import java.io.BufferedReader;
      import java.io.IOException;
      import java.io.InputStreamReader;

      /**
       ,* @program: UnderstandingJVM
       ,* @author: devinkin
       ,* @create: 2019-08-20 11:08
       ,* @description: BTrace跟踪演示
       ,**/
      public class BTraceTest {
          public int add(int a, int b) {
              return a + b;
          }

          public static void main(String[] args) throws IOException {
              BTraceTest test = new BTraceTest();
              BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));


              for (int i = 0; i < 10; i++) {
                  reader.readLine();
                  int a = (int) Math.round(Math.random() * 1000);
                  int b = (int) Math.round(Math.random() * 1000);
                  System.out.println(test.add(a, b));
              }
          }
      }
    #+end_src
