* 建造者模式
** 建造者模式的定义
将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

建造者模式中，有4个角色
- Product产品类
- Builder抽象建造者
- ConcreteBuilder具体建造者
- Director导演类

产品类
#+BEGIN_SRC java
  package bp.session4;

  /**
   ,* @program: zen-of-design-pattern
   ,* @author: devinkin
   ,* @create: 2019-06-07 15:22
   ,* @description: 产品类
   ,**/
  public abstract class Product {
      public void doSomething() {
          // 独立业务处理
      }
  }
#+END_SRC

抽象建造者类
#+BEGIN_SRC java
  package bp.session4;

  /**
   ,* @program: zen-of-design-pattern
   ,* @author: devinkin
   ,* @create: 2019-06-07 15:22
   ,* @description: 抽象建造者
   ,**/
  public abstract class Builder {
      // 设置产品的不同部分，以获得不同的产品
      public abstract void setPart();
      // 建造产品
      public abstract Product buildProduct();
  }
#+END_SRC

具体建造者类
如果有多个产品类就有几个具体的建造者，而且这多个产品类具有相同接口或抽象类。
#+BEGIN_SRC java
  package bp.session4;

  /**
   ,* @program: zen-of-design-pattern
   ,* @author: devinkin
   ,* @create: 2019-06-07 15:22
   ,* @description: 具体建造者
   ,**/
  public class ConcreteBuilder extends Builder{
      private Product product = new Product();
      @Override
      public void setPart() {
          /*
           ,* 产品类内的逻辑处理
           ,*/
      }

      @Override
      public Product buildProduct() {
          return product;
      }
  }
#+END_SRC

导演类
导演类起到封装的作用，避免高层模块深入到建造者内部的实现类。
#+BEGIN_SRC java
  package bp.session4;

  /**
   ,* @program: zen-of-design-pattern
   ,* @author: devinkin
   ,* @create: 2019-06-07 15:26
   ,* @description: 导演类
   ,**/
  public class Director {
      private Builder builder = new ConcreteBuilder();
      // 构建不同的产品
      public Product getAProduct() {
          builder.setPart();
          /*
           ,* 设置不同的零件，产生不同的产品
           ,*/
          return builder.buildProduct();
      }
  }
#+END_SRC


** 建造者模式的应用
*** 建造者模式的优点
- 封装性。使用建造者模式可以使客户端不必知道产品内组成的细节。
- 建造者独立，容易扩展。
- 便于控制细节风险。具体的建造者是独立的，因此可以对构造过程逐步细化，而不对其他的模块产生任何影响。

*** 建造者模式的使用场景
- 相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式。
- 多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时，则可以使用该模式。
- 产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能。
- 在对象创建过程中会使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到，可以使用建造者模式封装该对象的创建过程。
  
*** 建造者模式的注意事项
建造者模式关注的是零件类型和装配顺序，这是它与工厂方法模式最大不同的地方。


建造者模式的最主要功能是基本方法的调用顺序安排，也就是这些基本方法已经实现。

工厂方法则重点是创建，创建零件是它的主要职责，组装顺序则不是它关心的。

建造者模式可以与模板方法模式结合。模板方法模式用于构建零件。
